name: Backend CD workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options:
        - production
        - development
        required: true
        description: the deployment environment type
      deploy-on-instance:
        type: choice
        options:
        - true
        - false
        required: true
        description: enable the Docker image deployment on EC2 instance (it would use the tag value set in `deployment-image-tag`)
      deployment-image-tag:
        type: string
        required: true
        default: 'latest'
        description: the backend Docker image to use for the instance deployment
      publish-docker-image:
          type: choice
          options:
          - true
          - false
          required: true
          description: indicates if the workflow should build and push the Docker image to the container registry

  push:
    branches: [ main ]


jobs:
  define-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-params.outputs.environment }}
      deploy-on-instance: ${{ steps.set-params.outputs.deploy-on-instance }}
      deployment-image-tag: ${{ steps.set-params.outputs.deployment-image-tag }}
      publish-docker-image: ${{ steps.set-params.outputs.publish-docker-image }}
      publish-image-tag: ${{ steps.set-params.outputs.publish-image-tag }}
    steps:
        - uses: actions/checkout@v4
        - name: Set workflow parameters
          working-directory: ./backend
          id: set-params
          run: |
            echo "environment=${{ inputs.environment || 'development' }}" >> $GITHUB_OUTPUT
            echo "deploy-on-instance=${{ inputs.deploy-on-instance || 'true' }}" >> $GITHUB_OUTPUT
            echo "deployment-image-tag=${{ inputs.deployment-image-tag || 'latest' }}" >> $GITHUB_OUTPUT
            echo "publish-docker-image=${{ inputs.publish-docker-image || 'false' }}" >> $GITHUB_OUTPUT
            echo "publish-image-tag=$(python -c 'import app; print(app.__version__)')" >> $GITHUB_OUTPUT
  test-vars:
    runs-on: ubuntu-latest
    needs: define-environment
    if: needs.define-environment.outputs.publish-docker-image == 'false'
    steps:
        - name: Echo Vars
          run: |
            echo ${{needs.define-environment.outputs.environment}}
            echo ${{needs.define-environment.outputs.deploy-on-instance}}
            echo ${{needs.define-environment.outputs.deployment-image-tag}}
            echo ${{needs.define-environment.outputs.publish-docker-image}}
            echo ${{needs.define-environment.outputs.publish-image-tag}}